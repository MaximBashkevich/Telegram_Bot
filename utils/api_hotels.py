import requests
import os
import json
from loader import bot
from telebot.types import InputMediaPhoto
from loguru import logger


def output_hotels(chat_id, data_user: dict):
    sort_order = {'lowprice': 'PRICE', 'highprice': 'PRICE_HIGHEST_FIRST', 'bestdeal': 'DISTANCE_FROM_LANDMARK'}
    rapid_api_key = os.getenv('RAPID_API_KEY')

    url = "https://hotels4.p.rapidapi.com/properties/list"

    querystring = {"destinationId": data_user['destination_id'],
                   "pageNumber": "1",
                   "pageSize": data_user['count_hotels'],
                   "checkIn": data_user['check_in'],
                   "checkOut": data_user['check_out'],
                   "adults1": "1",
                   "sortOrder": sort_order[data_user['command']],
                   "locale": "en_US",
                   "currency": "USD"}
    if data_user['command'] == 'bestdeal':
        querystring['priceMin'], querystring['priceMax'] = \
            round(data_user['min_price'] / data_user['count_days']), \
            round(data_user['max_price'] / data_user['count_days'])
        querystring['landmarkIds'], querystring['pageSize'] = 'City center', '25'

    headers = {
        "X-RapidAPI-Key": rapid_api_key,
        "X-RapidAPI-Host": "hotels4.p.rapidapi.com"
    }
    logger.info(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É {url}")
    response = requests.request("GET", url, headers=headers, params=querystring)
    if response.status_code == requests.codes.ok:
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç api")
        result = json.loads(response.text)
        count_input_hotels = 0
        my_hotels = []
        for hotel in result['data']['body']['searchResults']['results']:
            logger.info(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ç–µ–ª—é {hotel["name"]} id {hotel["id"]}')
            if 'landmarkIds' in querystring:
                if conversion_dist(hotel['landmarks'][0]['distance']) > data_user['dist_to_center']:
                    logger.info(f'–û—Ç–µ–ª—å {hotel["name"]} id {hotel["id"]} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞, –∏—Å–∫–ª—é—á–∞–µ–º')
                    continue
            count_input_hotels += 1
            if int(hotel["starRating"]) != 0:
                star_rating = 'üåü' * int(hotel["starRating"])
            else:
                star_rating = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            if "guestReviews" in hotel:
                guest_reviews = f'{hotel["guestReviews"]["rating"]} –∏–∑ 10'
            else:
                guest_reviews = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            if 'streetAddress' in hotel['address']:
                address = f'{hotel["address"]["streetAddress"]}, {hotel["address"]["locality"]}'
            else:
                address = f'{hotel["address"]["locality"]}, {hotel["address"]["countryName"]}'
            day_price = round(hotel["ratePlan"]["price"]["exactCurrent"])
            total_price = round(day_price * data_user['count_days'])
            distance = conversion_dist(hotel["landmarks"][0]["distance"])
            caption_hotel = f'{hotel["name"]}\n' \
                            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç–µ–ª—è: {star_rating}   ' \
                            f'–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è: {guest_reviews}\n' \
                            f'üìç {address}\n' \
                            f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {distance} –∫–º\n' \
                            f'–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {day_price} $\n' \
                            f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total_price} $\n' \
                            f'https://hotels.com/ho{hotel["id"]}'
            my_hotels.append(f'{hotel["name"]} {total_price}$ https://hotels.com/ho{hotel["id"]}')
            if data_user['photo']:
                medias = []
                photo_hotel = get_photo_hotel(hotel['id'], data_user['count_photo'])
                if not photo_hotel:
                    logger.info(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è {hotel["name"]} id {hotel["id"]} '
                                f'–±–µ–∑ —Ñ–æ—Ç–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ properties/get-hotel-photos')
                    bot.send_message(chat_id, caption_hotel)
                    bot.send_message(chat_id, '–ò–ó–í–ò–ù–ò–¢–ï, –§–û–¢–û –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´')
                else:
                    for photo in photo_hotel:
                        if len(medias) == 0:
                            medias.append(InputMediaPhoto(photo, caption=caption_hotel))
                        else:
                            medias.append(InputMediaPhoto(photo))
                    logger.info(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è {hotel["name"]} id {hotel["id"]} –∏ –µ–≥–æ —Ñ–æ—Ç–æ')
                    bot.send_media_group(chat_id, medias)
            else:
                logger.info(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è {hotel["name"]} id {hotel["id"]} –±–µ–∑ —Ñ–æ—Ç–æ')
                bot.send_message(chat_id, caption_hotel)
            if count_input_hotels == data_user['count_hotels']:
                break
        if count_input_hotels == 0 or response.text == 'None':
            return False
        my_hotels = '\n'.join(my_hotels)
        return count_input_hotels, my_hotels
    else:
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç {url} –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ {response.status_code}")
        return 'Error API'


def get_photo_hotel(hotel_id: str, count_photo: str):

    rapid_api_key = os.getenv('RAPID_API_KEY')
    url = "https://hotels4.p.rapidapi.com/properties/get-hotel-photos"

    querystring = {"id": hotel_id}

    headers = {
        "X-RapidAPI-Key": rapid_api_key,
        "X-RapidAPI-Host": "hotels4.p.rapidapi.com"
    }
    logger.info(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É /get-hotel-photos –ø–æ id –æ—Ç–µ–ª—è {hotel_id}")
    response = requests.request("GET", url, headers=headers, params=querystring)
    if response.status_code == requests.codes.ok:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {url}")
        result_request = json.loads(response.text)['hotelImages']
        photo = []
        count_photo = int(count_photo)

        if len(result_request) < count_photo:
            count_photo = len(result_request)

        for element in result_request[:count_photo]:
            photo_link = element['baseUrl'].replace('{size}', 'y')
            photo.append(photo_link)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç api. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(photo)} —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è —Å id {hotel_id}")
        return photo
    else:
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç {url} –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ {response.status_code}")
        return False


def conversion_dist(distance: str) -> float:
    distance = distance.split()
    distance_km = round(1.60934 * float(distance[0]), 1)
    return distance_km
